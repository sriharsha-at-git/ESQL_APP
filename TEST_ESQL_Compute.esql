-- Author
-- Sriharsha
PATH util;

CREATE COMPUTE MODULE TEST_ESQL_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		-- IN msg 	- <Name>Memar Demeke<Name>
		-- OUT msg 	- <Name>MEMAR DEMEKE<Name>
		
		DECLARE vName, vUpperCaseName, vLowerCaseName CHAR;
		DECLARE vNameLength INT;
		
		SET vName = InputRoot.XMLNSC.Name;
		CALL util.getLength(vName) INTO vNameLength;
		CALL util.toUpperCase(vName) INTO vUpperCaseName;
		CALL util.toLowerCase(vName) INTO vLowerCaseName;

		
		SET OutputRoot.XMLNSC.Transform.OriginalName = vName;
		SET OutputRoot.XMLNSC.Transform.UpperCaseName = vUpperCaseName;
		SET OutputRoot.XMLNSC.Transform.LowerCasename = vLowerCaseName;
		SET OutputRoot.XMLNSC.Transform.NameLength = vNameLength;
		
--		DECLARE vPositionOfD INT;
--		
--		IF (CONTAINS(vName, 'd')) THEN
--			set vPositionOfD = POSITION('d' IN vName);
--			set vName = SUBSTRING(vName BEFORE (vPositionOfD-1));
--		ELSEIF (CONTAINS(vName, 'D')) THEN
--			set vPositionOfD = POSITION('D' IN vName);
--		ELSE
--			set vPositionOfD = 0;
--		END IF;

		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
